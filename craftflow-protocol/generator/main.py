#!/bin/env python

# This uses OpenAI API to generate rust code for the packet specifications from PrismarineJS/minecraft-data
#
# Running this script will generate any packets or versions that are not found already generated in the project

from colorama import init, Fore, Style

from conf import *
from find_all_versions import find_all_versions
from load_protocols import load_protocols

def main():
    versions = find_all_versions()

    # for debugging purposes
    for version in sorted(versions.keys()):
        print(Fore.CYAN + "Found version " +
            Fore.YELLOW + Style.BRIGHT + str(version) +
            Fore.CYAN + Style.NORMAL + " at " +
            Fore.YELLOW + Style.BRIGHT + str(versions[version]))

    # remove all versions that we are not interested in
    for version in list(versions.keys()):
        if version not in range(VERSION_RANGE[0], VERSION_RANGE[1] +1):
            del versions[version]

    # sort ascending by protocol version
    versions = dict(sorted(versions.items()))

    # load all the protocol.json files into a dictionary
    protocols = load_protocols(versions)

    # generate_protocols(protocols)

    # # also set the supported version list for rust code
    # with open("src/supported_versions.rs", "w") as f:
    #     f.write("// THIS FILE IS AUTOMATICALLY GENERATED BY main.py //\n")
    #     f.write("/////////////////////////////////////////////////////\n")
    #     f.write("pub const MIN_VERSION: u32 = " + str(VERSION_RANGE[0]) + ";\n")
    #     f.write("pub const MAX_VERSION: u32 = " + str(VERSION_RANGE[1]) + ";\n")

    print(Fore.GREEN + Style.BRIGHT + "Done")


if __name__ == "__main__":
    init(autoreset=True)
    main()
